/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CNFParser.jj */
/*@egen*/options 
{ 
 LOOKAHEAD=1; 
} 
 
PARSER_BEGIN(CNFParser) 

import java.util.HashMap;
import java.util.Vector;
import java.lang.String;

public class CNFParser/*@bgen(jjtree)*/implements CNFParserTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTCNFParserState jjtree = new JJTCNFParserState();

/*@egen*/

 HashMap<String, Vector<String>> SymbolTable = new HashMap<String,Vector<String>>();

 public static void main(String args[]) throws ParseException { 
	 CNFParser myParser = new CNFParser(System.in); 
	 SimpleNode root = myParser.Expression(); // devolve refer\u00eancia para o n\u00f3 raiz da \u00e1rvore 
	 //System.out.println("Valor da express\u00e3o: "+myCalc.eval(root)); 
	 
	 root.dump(""); // imprime no ecr\u00e3 a \u00e1rvore 
 }

 /*
int eval(SimpleNode node)
{ 
	if(node.jjtGetNumChildren() == 0) // leaf node with integer value 
 		return node.val; 
 	else if(node.jjtGetNumChildren() == 1) // only one child 
 		return this.eval((SimpleNode) node.jjtGetChild(0)); 
 
 	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child 
 	SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child 
 
	switch(node.id) { 
	 	case CNFParserTreeConstants.JJTADD : return eval( lhs ) + eval( rhs ); 
	 	case CNFParserTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs ); 
		case CNFParserTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs ); 
		case CNFParserTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs ); 
	 	default : // abort 
	 		System.out.println("Operador ilegal!"); 
	 		System.exit(1); 
 		} 
 	return 0; 
	}
	*/
} 
 
PARSER_END(CNFParser) 
 
SKIP :
{
	" " | "\n" | "\r" | "\t"
} 
 
TOKEN: 
{ 
 < AT: ":="> |
 < END: "END" >|
 //< SYMBOL: ["A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* > | //Permiti-se tamanhos maior que 1? P.ex: AC (pode-se confundir com nonTerm?)
 < NonTerm: ["A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>	 |
 < Term: ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*>
}
 
SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Expression */
         try {
/*@egen*/ 
	 (Atribution())+ < END >/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/ // c\u00f3digo Java entre chavetas 
}

void Atribution():{/*@bgen(jjtree) Atribution */
                   SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t,t1,t2;}
{/*@bgen(jjtree) Atribution */
   try {
/*@egen*/
  //S:= tu e o gato NP VP
  //VP:=Det
  //Det:= tu
  //VP:= e o gato
  
  //SYMBOL:=(NonTerm)+ (Term)* | (Term)+;
      t=<NonTerm> ":="
   {
   jjtn000.Symbol = new String(t.image);
   }
    (((t1=<NonTerm>{jjtn000.Variables.add(new String(t1.image));})+ (t2=<Term>{jjtn000.Variables.add(new String(t2.image));})*) 
	|
 (t1=<Term>{jjtn000.Variables.add(new String(t1.image));})+) ";"/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}

