options 
{ 
 LOOKAHEAD=1;
 STATIC=false; 
} 
 
PARSER_BEGIN(CNFParser) 

package parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.Vector;

import common.Structure;
import common.Type;
import algorithm.ChomskyConverter;

public class CNFParser implements Runnable
{

	private TreeMap<Structure, List<Vector<Structure>>> SymbolTable = null;
	private Vector<Structure> AcessableTokens = null;
	private String filePath;
	private File grammarFile;
	public String newFilePath;
	
	public boolean isValid=false;
	public boolean saveSucessful=false;


	public CNFParser(String path) throws FileNotFoundException
	{
		this(new FileInputStream(new File(path)), null);
		SymbolTable = new TreeMap<Structure,List<Vector<Structure>>>();
		AcessableTokens = new Vector<Structure>();
		this.filePath = path;
		grammarFile=new File(filePath);
	}

	@Override
	public void run()
	{
		try {
			SimpleNode root = Expression(); // devolve referência para o nó raiz da àrvore 

			//Create Symbol Table
			this.createSymbolTable(root);
			
			//root.dump("");
			
			this.SemanticAnalysis();
			
			if(!isValid)
				return;
			
			printSymbolTable();

			ChomskyConverter cnf = new ChomskyConverter(SymbolTable) ;
			Vector < Vector <String >> productions = new Vector < Vector<String >>() ;  
			productions = cnf.CNFconverter() ;
			saveGrammarToFile( productions );			
			System.out.println("Data structure from: "+grammarFile.getName()+" parsed and validated, next run CYK Algorithm");
			

		}catch(ParseException i){
			i.printStackTrace();
		}
		catch (Exception e) {
			System.out.println(e.toString());
			e.printStackTrace();
		}
	}

	public void saveGrammarToFile( Vector<Vector<String >>productions ){
		String fileName = grammarFile.getName().substring(0, grammarFile.getName().lastIndexOf("."));

		System.out.println("Saving "+fileName);
		FileOutputStream fOut=null;
		ObjectOutputStream oOut=null;

		try{
			//Save to file
			newFilePath = fileName+".ser";
			fOut= new FileOutputStream(newFilePath);
			oOut = new ObjectOutputStream(fOut);
			oOut.writeObject(productions);
			System.out.println("Save sucessful");
			saveSucessful=true;			
		}
		catch(IOException e) {
			System.err.println("Error: "+e.toString());
			e.printStackTrace();
		}
		finally {
			try {
				oOut.flush();
				oOut.close();
				fOut.close();
			}
			catch (IOException e1) {
				e1.printStackTrace();
			}
		}

	}

	void printSymbolTable()
	{
		List<Vector<Structure>> value;
		Structure key;
		System.out.println("TreeHash");
		for(Entry<Structure, List<Vector<Structure>>> entry : SymbolTable.entrySet())
        {
        	value=entry.getValue();
        	key=entry.getKey();
        	System.out.print("Key: "+key.toString()+" -> Values:");
        	for (Vector<Structure> i : value) {
        		System.out.print("[");
        		for(Structure x:i)
        		{
        			System.out.print(x.toString());
        			if(i.lastElement()!=x)
        				System.out.print(",");
        		}
        		System.out.print("]");
        		if(value.indexOf(i)!=value.size()-1)
					System.out.print(",");
	        }
    	    System.out.println();
        }
	}

	void createSymbolTable(SimpleNode node) {
		for(int i=0; i< node.jjtGetNumChildren(); i++) {
			createSymbolTable((SimpleNode) node.jjtGetChild(i));
		}
		if(node.id == CNFParserTreeConstants.JJTSTARTATRIBUTION) {
			if(node.Variables.size()!=0)
			{
				List<Vector<Structure>> aux;
				if(SymbolTable.get(node.Symbol)==null)
				{
					SymbolTable.put(node.Symbol, node.Variables);
				}
				else
				{
					aux = SymbolTable.get(node.Symbol);
					for(Vector<Structure> temp: node.Variables)
						aux.add(temp);
				}
				aux = node.Variables;
				for (Vector<Structure> temp : aux) {
					for (Structure struct : temp) {
						if(!AcessableTokens.contains(struct))
							AcessableTokens.add(struct);
					}
				}
				return;
			}
			else //gramatica não permite chegar a este ponto
			{
				System.err.println("[Error] Invalid attribution in line "+node.Symbol.line+" ,column "+node.Symbol.column);
				isValid=false;
			}
		}
		else if(node.id == CNFParserTreeConstants.JJTATRIBUTION) {
			if(node.Variables.size()!=0)
			{
				List<Vector<Structure>> aux;
				if(SymbolTable.get(node.Symbol)==null)
				{
					SymbolTable.put(node.Symbol, node.Variables);
				}
				else
				{
					aux = SymbolTable.get(node.Symbol);
					for(Vector<Structure> temp: node.Variables)
						aux.add(temp);
				}
				aux = node.Variables;
				for (Vector<Structure> temp : aux) {
					for (Structure struct : temp) {
						if(!AcessableTokens.contains(struct))
							AcessableTokens.add(struct);
					}
				}
				return;
			}
			else //gramatica não permite chegar a este ponto
			{
				System.err.println("[Error] Invalid attribution in line "+node.Symbol.line+" ,column "+node.Symbol.column);
				isValid=false;
			}
		}
		else if(node.id!=CNFParserTreeConstants.JJTEXPRESSION)
		{
			System.err.println("[Error] Ilegal operator in line "+node.Symbol.line+" ,column "+node.Symbol.column+" !");
			isValid=false;
		}
		else
			isValid=true;
		return;
	}

	void SemanticAnalysis()
	{
		boolean fail=false;
		List<Vector<Structure>> value;
		Structure key;
		for(Entry<Structure, List<Vector<Structure>>> entry : SymbolTable.entrySet()) {
			value= entry.getValue();
			key=entry.getKey();
			if(!Analyse(key))
				System.err.println("[Warning] "+key.type+" "+key.name+" cannot be derived from START attribution, line "+key.line+", column:"+key.column);
			for (Vector<Structure> i : value) {
				for(Structure x:i)
				{
					if(x.type!=Type.NONTERM)
						continue;
					else if(!SymbolTable.containsKey(x))
					{
						System.err.println("[Error] Found "+x.type+": " +x.name+" without production in line "+x.line+", coloumn "+x.column);
						fail=true;
					}
				}
			}
		}
		if(fail)
			isValid=false;
	}

	private boolean Analyse(Structure key) {
		if(key.type!=Type.START)
		{
			if(AcessableTokens.contains(key))
				return true;
			else
				return false;
		}
		return true;
	}

	 public void clean() {
        SymbolTable=null;
        AcessableTokens=null;
        grammarFile=null;
        newFilePath=null;
        try {
			ReInit(new FileInputStream(new File(filePath)));
		} catch (FileNotFoundException e) {
			System.out.println(e.toString());
			e.printStackTrace();
		}
     }
} 
 
PARSER_END(CNFParser) 
 
SKIP :
{
	" " | "\n" | "\r" | "\t"
} 
 
TOKEN: 
{
 //Permite-se tamanhos maior que 1? P.ex: AC (pode-se confundir com nonTerm?)
 < START: "START" >|
 < END: "END" >|
 < ASSIGN: ":=">|
 < ENDPROD: ";">|
 < OR: "|">|
 < STRING: "STRING:">|
 < EPSILON: "epsilon">|
 < NonTerm: ["A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>	 |
 < Term: ["a"-"z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>
}
 
SimpleNode Expression(): {Token t;} 
{
	(StartAtribution())+ (Atribution())* < END >{return jjtThis;} // código Java entre chavetas 
}

void StartAtribution():{ Token lhs,rhs; }
{
	lhs=<START> <ASSIGN>
	{
		jjtThis.Symbol.name = new String(lhs.image);
		jjtThis.Symbol.line=lhs.beginLine;
		jjtThis.Symbol.column=lhs.beginColumn;
		jjtThis.Symbol.type=Type.START;
	}
	(
	  	rhs=<Term>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.TERM,rhs.beginLine,rhs.beginColumn));}
	|
		(
		  rhs=<NonTerm>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.NONTERM,rhs.beginLine,rhs.beginColumn));}
		|
		  rhs=<START>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.START,rhs.beginLine,rhs.beginColumn));}
		)
	|
		rhs=<EPSILON>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.EPSILON,rhs.beginLine,rhs.beginColumn));}
	)+
	(<OR>
	{jjtThis.Variables.add(new Vector<Structure >());}
		(
			rhs=<Term>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.TERM,rhs.beginLine,rhs.beginColumn));}
		|
			(
			  rhs=<NonTerm>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.NONTERM,rhs.beginLine,rhs.beginColumn));}
			|
			  rhs=<START>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.START,rhs.beginLine,rhs.beginColumn));}
			)
		|
			rhs=<EPSILON>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.EPSILON,rhs.beginLine,rhs.beginColumn));}
		)+
	)*
	<ENDPROD>
}

void Atribution():{Token lhs,rhs;}
{
  	lhs=<NonTerm> <ASSIGN>
	{
		jjtThis.Symbol.name = new String(lhs.image);
		jjtThis.Symbol.line=lhs.beginLine;
		jjtThis.Symbol.column=lhs.beginColumn;
		jjtThis.Symbol.type=Type.NONTERM;
	}
	(
	  	rhs=<Term>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.TERM,rhs.beginLine,rhs.beginColumn));}
	|
		(
		  rhs=<NonTerm>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.NONTERM,rhs.beginLine,rhs.beginColumn));}
		|
		  rhs=<START>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.START,rhs.beginLine,rhs.beginColumn));}
		)
	|
		rhs=<EPSILON>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.EPSILON,rhs.beginLine,rhs.beginColumn));}
	)+
	(<OR>
	{jjtThis.Variables.add(new Vector<Structure >());}
		(
			rhs=<Term>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.TERM,rhs.beginLine,rhs.beginColumn));}
		|
			(
			  rhs=<NonTerm>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.NONTERM,rhs.beginLine,rhs.beginColumn));}
			|
			  rhs=<START>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.START,rhs.beginLine,rhs.beginColumn));}
			)
		|
		rhs=<EPSILON>{jjtThis.Variables.get(jjtThis.Variables.size()-1).add(new Structure(rhs.image,Type.EPSILON,rhs.beginLine,rhs.beginColumn));}
		)+
	)*
	<ENDPROD>
}
